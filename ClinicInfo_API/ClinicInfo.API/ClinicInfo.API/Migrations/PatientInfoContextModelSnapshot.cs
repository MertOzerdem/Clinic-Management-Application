// <auto-generated />
using System;
using ClinicInfo.API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicInfo.API.Migrations
{
    [DbContext(typeof(PatientInfoContext))]
    partial class PatientInfoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClinicInfo.API.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PatientId");

                    b.Property<string>("Text");

                    b.HasKey("NotificationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance");

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.PatientService", b =>
                {
                    b.Property<int>("PatientServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PatientId");

                    b.Property<int?>("ServiceId");

                    b.HasKey("PatientServiceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PatientServices");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("Method")
                        .HasMaxLength(20);

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Provider")
                        .HasMaxLength(50);

                    b.Property<double>("ServiceFee");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.ServiceOrder", b =>
                {
                    b.Property<int>("ServiceOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServiceId");

                    b.Property<int?>("ServiceTypeId");

                    b.HasKey("ServiceOrderId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Fee");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PatientId");

                    b.Property<int?>("PaymentId");

                    b.HasKey("TransactionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.Notification", b =>
                {
                    b.HasOne("ClinicInfo.API.Entities.Patient", "Patient")
                        .WithMany("Notifications")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.PatientService", b =>
                {
                    b.HasOne("ClinicInfo.API.Entities.Patient", "Patient")
                        .WithMany("PatientServices")
                        .HasForeignKey("PatientId");

                    b.HasOne("ClinicInfo.API.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.ServiceOrder", b =>
                {
                    b.HasOne("ClinicInfo.API.Entities.Service", "Service")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("ServiceId");

                    b.HasOne("ClinicInfo.API.Entities.ServiceType", "ServiceType")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("ServiceTypeId");
                });

            modelBuilder.Entity("ClinicInfo.API.Entities.Transaction", b =>
                {
                    b.HasOne("ClinicInfo.API.Entities.Patient", "Patient")
                        .WithMany("Transactions")
                        .HasForeignKey("PatientId");

                    b.HasOne("ClinicInfo.API.Entities.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId");
                });
#pragma warning restore 612, 618
        }
    }
}
